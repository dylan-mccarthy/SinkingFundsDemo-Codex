datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Generates the Prisma Client based on this schema.
/// The client is used within the SvelteKit app to talk to the SQLite database.
generator client {
  provider = "prisma-client-js"
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER_OUT
  TRANSFER_IN
  ALLOCATION
}

enum PeriodStatus {
  OPEN
  CLOSED
}

/// A registered user of the application.
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  funds          Fund[]
  periods        Period[]
  transactions   Transaction[]
  allocationRules AllocationRule[]
  allocationRuns AllocationRun[]
  auditLogs      AuditLog[]
}

/// Envelope used to segregate money for a specific purpose.
model Fund {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  color           String?
  icon            String?
  active          Boolean  @default(true)
  targetCents     Int?
  minReserveCents Int?
  displayOrder    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User      @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  allocationRules AllocationRule[]
  allocationLines AllocationLine[]
}

/// Accounting period representing a calendar month.
model Period {
  id        String      @id @default(cuid())
  userId    String
  year      Int
  month     Int
  status    PeriodStatus @default(OPEN)
  startedAt DateTime
  closedAt  DateTime?

  user          User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  allocationRuns AllocationRun[]

  @@unique([userId, year, month])
}

/// Rule describing how a fund receives money from the monthly deposit.
model AllocationRule {
  id         String   @id @default(cuid())
  userId     String
  fundId     String
  mode       String
  percentBp  Int?
  fixedCents Int?
  priority   Int      @default(0)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  fund Fund @relation(fields: [fundId], references: [id])
}

/// Represents a specific execution of the allocation engine.
model AllocationRun {
  id           String   @id @default(cuid())
  userId       String
  periodId     String
  depositCents Int
  executedAt   DateTime @default(now())
  hash         String

  user   User   @relation(fields: [userId], references: [id])
  period Period @relation(fields: [periodId], references: [id])
  lines  AllocationLine[]
}

/// Individual fund allocation produced during a run.
model AllocationLine {
  id              String @id @default(cuid())
  allocationRunId String
  fundId          String
  amountCents     Int

  run  AllocationRun @relation(fields: [allocationRunId], references: [id])
  fund Fund          @relation(fields: [fundId], references: [id])
}

/// Any operation affecting fund balances: expenses, income or transfers.
model Transaction {
  id              String   @id @default(cuid())
  userId          String
  periodId        String?
  fundId          String?
  type            TransactionType
  amountCents     Int
  date            DateTime
  payee           String?
  note            String?
  tags            String?
  transferGroupId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  period Period? @relation(fields: [periodId], references: [id])
  fund   Fund?   @relation(fields: [fundId], references: [id])
}

/// Stores significant system events for audit purposes.
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  context   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

